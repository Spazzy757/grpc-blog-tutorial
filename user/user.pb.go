// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	UserRequest
	UserResponse
	UserFilter
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new customer
type UserRequest struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UserFilter struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *UserFilter) Reset()                    { *m = UserFilter{} }
func (m *UserFilter) String() string            { return proto.CompactTextString(m) }
func (*UserFilter) ProtoMessage()               {}
func (*UserFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "user.UserRequest")
	proto.RegisterType((*UserResponse)(nil), "user.UserResponse")
	proto.RegisterType((*UserFilter)(nil), "user.UserFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	GetUsers(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (User_GetUsersClient, error)
	// Create a new Customer - A simple RPC
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUsers(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (User_GetUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_User_serviceDesc.Streams[0], c.cc, "/user.User/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_GetUsersClient interface {
	Recv() (*UserRequest, error)
	grpc.ClientStream
}

type userGetUsersClient struct {
	grpc.ClientStream
}

func (x *userGetUsersClient) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/user.User/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	// Get all Customers with filter - A server-to-client streaming RPC.
	GetUsers(*UserFilter, User_GetUsersServer) error
	// Create a new Customer - A simple RPC
	CreateUser(context.Context, *UserRequest) (*UserResponse, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).GetUsers(m, &userGetUsersServer{stream})
}

type User_GetUsersServer interface {
	Send(*UserRequest) error
	grpc.ServerStream
}

type userGetUsersServer struct {
	grpc.ServerStream
}

func (x *userGetUsersServer) Send(m *UserRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _User_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x37, 0x35, 0xab, 0x75, 0x14, 0xd1, 0xc1, 0x43, 0xe8, 0x69, 0xc9, 0x41, 0xf6, 0xb4,
	0x88, 0x8b, 0xe0, 0x5d, 0xd0, 0x7b, 0xc0, 0x1f, 0x10, 0xdb, 0x39, 0x04, 0x77, 0x37, 0x35, 0x93,
	0x22, 0xfe, 0x7b, 0xc9, 0xd4, 0xb5, 0x42, 0x6f, 0xef, 0xbd, 0xbe, 0xe9, 0xc7, 0x0b, 0xc0, 0xc0,
	0x94, 0x36, 0x7d, 0x8a, 0x39, 0xa2, 0x2e, 0xda, 0xb6, 0x70, 0xf1, 0xc6, 0x94, 0x1c, 0x7d, 0x0e,
	0xc4, 0x19, 0xaf, 0xa0, 0x0a, 0x9d, 0x51, 0x2b, 0xb5, 0x5e, 0xba, 0x2a, 0x74, 0x88, 0xa0, 0x0f,
	0x7e, 0x4f, 0xa6, 0x5a, 0xa9, 0xf5, 0xb9, 0x13, 0x8d, 0xb7, 0xb0, 0xa4, 0xbd, 0x0f, 0x3b, 0x73,
	0x22, 0xe1, 0x68, 0xb0, 0x81, 0xba, 0xf7, 0xcc, 0x5f, 0x31, 0x75, 0x46, 0xcb, 0x87, 0x3f, 0x6f,
	0x9f, 0xe0, 0x72, 0x84, 0x70, 0x1f, 0x0f, 0x4c, 0x33, 0x8a, 0x81, 0x33, 0x1e, 0xda, 0x96, 0x98,
	0x05, 0x54, 0xbb, 0xa3, 0xb5, 0x77, 0x00, 0xe5, 0xf2, 0x25, 0xec, 0x32, 0xa5, 0xd2, 0xfb, 0xa0,
	0x6f, 0x41, 0x28, 0x41, 0x1c, 0xed, 0x43, 0x02, 0x5d, 0x7a, 0xb8, 0x85, 0xfa, 0x95, 0x72, 0x91,
	0x8c, 0xd7, 0x1b, 0x59, 0x3b, 0xdd, 0x37, 0x37, 0x53, 0xf2, 0x3b, 0xd8, 0x2e, 0xee, 0x15, 0x3e,
	0x02, 0x3c, 0x27, 0xf2, 0x99, 0xe4, 0x17, 0xf3, 0x52, 0x83, 0xff, 0xa3, 0x71, 0x83, 0x5d, 0xbc,
	0x9f, 0xca, 0x3b, 0x6e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x63, 0x2a, 0xd0, 0xb1, 0x55, 0x01,
	0x00, 0x00,
}
